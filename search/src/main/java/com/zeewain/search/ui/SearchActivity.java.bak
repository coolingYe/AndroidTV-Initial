package com.zeewain.search.ui;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;

import androidx.databinding.DataBindingUtil;
import androidx.leanback.widget.ArrayObjectAdapter;
import androidx.leanback.widget.FocusHighlight;
import androidx.leanback.widget.FocusHighlightHelper;
import androidx.leanback.widget.ItemBridgeAdapter;
import androidx.leanback.widget.OnChildViewHolderSelectedListener;
import androidx.lifecycle.ViewModelProviders;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.search.R;
import com.example.search.databinding.ActivitySearchBinding;
import com.zeewain.base.Views.CustomNormalDialog;
import com.zeewain.base.config.SharePrefer;
import com.zeewain.base.model.LoadState;
import com.zeewain.base.ui.BaseActivity;
import com.zeewain.base.utils.DensityUtils;
import com.zeewain.base.utils.NetworkUtil;
import com.zeewain.base.utils.SPUtils;
import com.zeewain.base.utils.ZeeWainGson;
import com.zeewain.search.adapter.GuideSearchAdapter;
import com.zeewain.search.adapter.SearchTipsAdapter;
import com.zeewain.search.data.SearchRepository;
import com.zeewain.search.data.model.CourseInfo;
import com.zeewain.search.data.model.RecommendInfo;
import com.zeewain.search.data.protocol.request.SearchReq;
import com.zeewain.search.data.protocol.response.ProductListMo;
import com.zeewain.search.data.protocol.response.SearchResp;
import com.zeewain.search.model.CommonSearchModel;
import com.zeewain.search.presenter.GridPresenter;
import com.zeewain.search.view.CustomEasyTVKeyboard;

import java.util.ArrayList;
import java.util.List;

@SuppressLint({"SetTextI18n", "NotifyDataSetChanged"})
public class SearchActivity extends BaseActivity implements CustomEasyTVKeyboard.OnMyTextChangedListener, CustomEasyTVKeyboard.OnMyTextFocusListener {

    private final static String TAG = "SearchActivity";

    private ActivitySearchBinding mBinding;
    private SearchViewModel mViewModel;

    private final List<CourseInfo> mCourseInfoList = new ArrayList<>();
    private final List<CourseInfo> mHistoryInfoList = new ArrayList<>();

    private GridPresenter mPresenter;
    private ItemBridgeAdapter mItemBridgeAdapter;
    private ArrayObjectAdapter mArrayObjectAdapter;
    private GuideSearchAdapter mHistorySearchAdapter;
    private GuideSearchAdapter mGuideSearchAdapter;
    private SearchTipsAdapter mSearchTipsAdapter;
    
    private final String mCategoryId = "care";
    private final String moduleType = "5";
    private String mCurrentFocus = "A";
    private String mTextResult;
    private String mCurrentStr;

    private int mShowPage = 0;
    private int mCurrentSelectType;
    private int mCurrentHistoryIndex;
    private int mCurrentGuideIndex = -1;
    private int mCurrentIndexCourse;

    private boolean mIsSecondPage;
    private boolean mIsWillSecondPage=false;
    private boolean mShowSelect = false;

    private final Handler mHandler = new Handler();
    private Button mRefreshBtn;

    private RecommendInfo mRecommendInfo;
    private CustomNormalDialog mCustomNormalDialog;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        DensityUtils.autoWidth(getApplication(), this);
        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_search);

        initData();
        initView();
        initListener();
        initViewObservable();
        //获取缓存
        showCacheUi();
    }

    private void initData() {
        SearchViewModelFactory searchViewModelFactory = new SearchViewModelFactory(SearchRepository.getInstance());
        mViewModel = ViewModelProviders.of(this, searchViewModelFactory).get(SearchViewModel.class);

        mPresenter = new GridPresenter();
        mArrayObjectAdapter = new ArrayObjectAdapter(mPresenter);
    }

    private void initView() {
        mBinding.kbSearchKeyboard.setmOnMyTextChangedListener(this);
        mBinding.kbSearchKeyboard.setMyTextFocusListener(this);
//        LinearLayoutManager layoutGuideManager = new LinearLayoutManager(SearchActivity.this, LinearLayoutManager.VERTICAL, false);
//        mBinding.rvGuide.setLayoutManager(layoutGuideManager);

        mBinding.vgvSearchResult.setNumColumns(2);
        mBinding.vgvSearchResult.setItemSpacing(getResources().getDimensionPixelSize(R.dimen.src_dp_14));
        mBinding.vgvSearchResult.setGravity(Gravity.CENTER_HORIZONTAL);

        mRefreshBtn = mBinding.includeSearchFailed.findViewById(R.id.btn_req_failed_base);
//        mBinding.tvTitle.setText("热门搜索");

//        LinearLayoutManager historyManager = new LinearLayoutManager(SearchActivity.this, LinearLayoutManager.VERTICAL, false);
//        mBinding.rvHistory.setLayoutManager(historyManager);

        initTips();
    }

    private void initTips() {
        mSearchTipsAdapter = new SearchTipsAdapter(getResources().getDimensionPixelSize(R.dimen.src_dp_40));
        mSearchTipsAdapter.addItem(new CommonSearchModel(SearchTipsAdapter.TYPE_TITLE_WITH_DELETE, "搜索历史"));
        mSearchTipsAdapter.addItem(new CommonSearchModel(SearchTipsAdapter.TYPE_PRODUCT_NAME, "1"));
        mSearchTipsAdapter.addItem(new CommonSearchModel(SearchTipsAdapter.TYPE_PRODUCT_NAME, "1"));
        mSearchTipsAdapter.addItem(new CommonSearchModel(SearchTipsAdapter.TYPE_PRODUCT_NAME, "1"));
        mSearchTipsAdapter.addItem(new CommonSearchModel(SearchTipsAdapter.TYPE_PRODUCT_NAME, "1"));
        mSearchTipsAdapter.addItem(new CommonSearchModel(SearchTipsAdapter.TYPE_TITLE_WITHOUT_DELETE, "热门搜索"));

        LinearLayoutManager layoutManager = new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false);
        mBinding.rvSearchTips.setLayoutManager(layoutManager);
        mBinding.rvSearchTips.setAdapter(mSearchTipsAdapter);
        mSearchTipsAdapter.notifyDataSetChanged();
    }

    private void initListener() {
        mRefreshBtn.setOnClickListener(v -> {
            String hotSearch = SPUtils.getInstance().getString(SharePrefer.recommendInfo);
            if (TextUtils.isEmpty(hotSearch)) {
                mViewModel.reqCareModuleList(mCategoryId, moduleType);
            } else {
                dealSearch(mCurrentStr);
            }
        });

//        mBinding.tvResult.setOnFocusChangeListener((v, hasFocus) -> {
//            if (mIsSecondPage) {
//                return;
//            }
//            if (hasFocus) {
//                mCurrentGuideIndex = -1;
//                mCurrentSelectType = 1;
//            }
//        });

//        mBinding.tvResult.setOnClickListener(v -> {
//            mBinding.tvCourseTitle.setText("“" + mTextResult + "”" + "的全部结果");
//            refreshCourseAdapter();
//        });
//
//        mBinding.layoutDelete.setOnFocusChangeListener((v, hasFocus) -> {
//            if (mIsSecondPage) {
//                return;
//            }
//            mCurrentHistoryIndex = -1;
//            mCurrentSelectType = 0;
//        });
//
//        mBinding.layoutDelete.setOnClickListener(v -> showDeleteDialog());
    }

    private void initViewObservable() {
        mViewModel.mSearchState.observe(this, loadState -> {
            if (LoadState.Loading == loadState) {
                mBinding.includeSearchLoading.setVisibility(View.VISIBLE);
            } else if (LoadState.Success == loadState) {
                mBinding.includeSearchLoading.setVisibility(View.GONE);
                mBinding.includeSearchFailed.setVisibility(View.GONE);
                SearchResp searchInfo = mViewModel.mSearchInfo;
                if (searchInfo != null) {
                    List<SearchResp.RecordInfo> recordInfoList = searchInfo.getRecords();
                    mCourseInfoList.clear();
                    if ((recordInfoList != null)) {
                        for (int i = 0; i < recordInfoList.size(); i++) {
                            SearchResp.RecordInfo recordInfo = recordInfoList.get(i);
                            String skuId = recordInfo.getSkuId();
                            String productTitle = recordInfo.getProductTitle();
                            String productImg = recordInfo.getProductImg();
                            if ((!TextUtils.isEmpty(skuId)) && (!TextUtils.isEmpty(productTitle)) && (!TextUtils.isEmpty(productImg))) {
                                CourseInfo courseInfo = new CourseInfo();
                                courseInfo.setSkuID(skuId);
                                courseInfo.setName(productTitle);
                                courseInfo.setImageUrl(productImg);
                                mCourseInfoList.add(courseInfo);
                            } else {
                                showToast("服务器返回数据异常");
                            }
                        }
                        addGridData();
                        //界面展示效果
                        showUI();
                    }
                } else {
                    showToast("服务器返回数据异常");
                }
            } else if (LoadState.Failed == loadState) {
                mBinding.includeSearchLoading.setVisibility(View.GONE);
                mBinding.includeSearchFailed.setVisibility(View.VISIBLE);
                mRefreshBtn.requestFocus();
                if (!mIsWillSecondPage){
                    mCurrentFocus = "0";
                }
                mShowPage = 1;
            }
        });

        //获取精选里面数据
        mViewModel.mldCareModuleListLoadState.observe(this, productListLoadState -> {
            if (mCategoryId.equals(productListLoadState.categoryId)) {
                if (LoadState.Loading == productListLoadState.loadState) {
                    mBinding.includeSearchLoading.setVisibility(View.VISIBLE);
                } else if (LoadState.Success == productListLoadState.loadState) {
                    mBinding.includeSearchLoading.setVisibility(View.GONE);
                    mBinding.includeSearchFailed.setVisibility(View.GONE);
                    ProductListMo productModuleListMo = mViewModel.getCareModuleListFromCache(moduleType);
                    saveToCache(productModuleListMo);
                } else {
                    mBinding.includeSearchLoading.setVisibility(View.GONE);
                    mBinding.includeSearchFailed.setVisibility(View.VISIBLE);
                    mRefreshBtn.requestFocus();
                    if (!mIsWillSecondPage){
                        mCurrentFocus = "0";
                    }
                    mShowPage=1;
                }
            }
        });
    }

    private void refreshCourseAdapter() {
        if ((mCourseInfoList != null) && (mCourseInfoList.size() > 0)) {
            addGridData();
            mItemBridgeAdapter.notifyDataSetChanged();
        }
    }

    private void showDeleteDialog() {
        if (mCustomNormalDialog == null) {
            mCustomNormalDialog = new CustomNormalDialog(this, R.layout.layout_dialog_reverse);
            mCustomNormalDialog.show();
            mCustomNormalDialog.title.setText("确定清空历史记录？");
            mCustomNormalDialog.positive.setText("确认");
            mCustomNormalDialog.cancel.setText("取消");
            mCustomNormalDialog.setOnClickListener(new CustomNormalDialog.OnClickListener() {
                @Override
                public void onConFirm() {
                    //删除后默认选中热搜第一条
                    mCurrentGuideIndex = 0;
                    mCurrentSelectType = 1;
                    SPUtils.getInstance().remove(SharePrefer.historyInfo);
                    mHistoryInfoList.clear();
//                    mBinding.layoutHistory.setVisibility(View.GONE);
                    if (mHistorySearchAdapter != null) {
                        mHistorySearchAdapter.notifyDataSetChanged();
                    }
                    refreshCourseAdapter();
                }

                @Override
                public void onCancel() {

                }
            });
        } else {
            if (!mCustomNormalDialog.isShowing()) {
                mCustomNormalDialog.show();
            }
        }
    }

    private void showCacheUi() {
        //重置
        mCurrentHistoryIndex = 0;
        mCurrentGuideIndex = -1;
        //热门搜索
        String hotSearch = SPUtils.getInstance().getString(SharePrefer.recommendInfo);
        if (!TextUtils.isEmpty(hotSearch)) {
            mCurrentSelectType = 1;
            mRecommendInfo = ZeeWainGson.getInstance().fromJson(hotSearch, RecommendInfo.class);
            mCourseInfoList.clear();
            List<CourseInfo> infoList = mRecommendInfo.getCourseInfoList();
            mCourseInfoList.addAll(infoList);
            //gridview添加数据
            addGridData();
        } else {
            // 首次安装app但是断网，第一次没有缓存情况展示
            mBinding.includeSearchFailed.setVisibility(View.VISIBLE);
            mHandler.postDelayed(() -> {
                if (!mIsWillSecondPage){
                    mCurrentFocus="0";
                }
                mShowPage = 1;
                mRefreshBtn.requestFocus();
            }, 200);
        }

        //搜索历史
        String history = SPUtils.getInstance().getString(SharePrefer.historyInfo);
        if (!TextUtils.isEmpty(history)) {
            mCurrentSelectType = 0;
            RecommendInfo historyInfo = ZeeWainGson.getInstance().fromJson(history, RecommendInfo.class);
            List<CourseInfo> courseHistoryInfoList = historyInfo.getCourseInfoList();
            mHistoryInfoList.clear();
            mHistoryInfoList.addAll(courseHistoryInfoList);
        } else {
//            mBinding.layoutHistory.setVisibility(View.GONE);
        }
        if ((mHistoryInfoList != null) && (mHistoryInfoList.size() > 0)) {
//            mBinding.layoutHistory.setVisibility(View.VISIBLE);
        }
        showUI();
    }


    private void showUI() {
        if (mGuideSearchAdapter == null) {
            mGuideSearchAdapter = new GuideSearchAdapter(mCourseInfoList);
//            mBinding.rvGuide.setAdapter(mGuideSearchAdapter);
//            mGuideSearchAdapter.setItemFocusListener((position, data) -> {
//                if (mIsSecondPage && (mBinding.tvResult.getVisibility()==View.VISIBLE)) {
//                    return;
//                }
//                mCurrentGuideIndex = position;
//                mCurrentSelectType = 1;
//
//            });
            mGuideSearchAdapter.setListener((position, name) -> {
                mBinding.tvCourseTitle.setText("当前结果");
                //设置某个gridview数据
                showGridSelect(position);
            });
        } else {
            mGuideSearchAdapter.notifyDataSetChanged();
        }

        //gridview设置adapter
        if (mItemBridgeAdapter == null) {
            mItemBridgeAdapter = new ItemBridgeAdapter(mArrayObjectAdapter);
            mBinding.vgvSearchResult.setAdapter(mItemBridgeAdapter);
            FocusHighlightHelper.setupBrowseItemFocusHighlight(mItemBridgeAdapter,
                    FocusHighlight.ZOOM_FACTOR_LARGE, false);
            mItemBridgeAdapter.setAdapterListener(new ItemBridgeAdapter.AdapterListener() {
                @Override
                public void onCreate(final ItemBridgeAdapter.ViewHolder viewHolder) {
                    viewHolder.itemView.setOnClickListener(v -> {
                        int position = viewHolder.getAdapterPosition();

                        try {
                            Intent intent = new Intent(SearchActivity.this, Class.forName("com.zwn.launcher.ui.detail.DetailActivity"));
                            CourseInfo item = (CourseInfo) mArrayObjectAdapter.get(position);
                            intent.putExtra("skuId", item.getSkuID());
                            startActivity(intent);
                            saveHistory(position);
                        } catch (ClassNotFoundException e) {
                            e.printStackTrace();
                        }
                    });
                }
            });
            mBinding.vgvSearchResult.setOnChildViewHolderSelectedListener(new OnChildViewHolderSelectedListener() {
                @Override
                public void onChildViewHolderSelected(RecyclerView parent, RecyclerView.ViewHolder child, int position, int subposition) {
                    super.onChildViewHolderSelected(parent, child, position, subposition);
                    mCurrentIndexCourse = position;
                }

                @Override
                public void onChildViewHolderSelectedAndPositioned(RecyclerView parent, RecyclerView.ViewHolder child, int position, int subposition) {
                    super.onChildViewHolderSelectedAndPositioned(parent, child, position, subposition);
                }
            });
        } else {
            mItemBridgeAdapter.notifyDataSetChanged();
        }

        if (mCourseInfoList.size() == 0) {
            mBinding.tvCourseTitle.setVisibility(View.GONE);
            mBinding.includeSearchEmpty.setVisibility(View.VISIBLE);
        } else {
            mBinding.tvCourseTitle.setVisibility(View.VISIBLE);
            mBinding.includeSearchEmpty.setVisibility(View.GONE);
        }

        if (mHistorySearchAdapter == null) {
            mHistorySearchAdapter = new GuideSearchAdapter(mHistoryInfoList);
//            mBinding.rvHistory.setAdapter(mHistorySearchAdapter);
            mHistorySearchAdapter.setItemFocusListener((position, data) -> {
                if (mIsSecondPage) {
                    return;
                }
                mCurrentHistoryIndex = position;
                mCurrentSelectType = 0;
            });
            mHistorySearchAdapter.setListener((position, name) -> {
                // Toast.makeText(SearchActivity.this, name, Toast.LENGTH_SHORT).show();
                if (mItemBridgeAdapter != null) {
                    mArrayObjectAdapter.clear();
                    mArrayObjectAdapter.add(0, mHistoryInfoList.get(position));
                    mItemBridgeAdapter.notifyDataSetChanged();
                }
            });
        } else {
            mHistorySearchAdapter.notifyDataSetChanged();
        }
    }

    private void addGridData() {
        if ((mCourseInfoList != null) && (mCourseInfoList.size() > 0)) {
            mArrayObjectAdapter.clear();
            if (mShowPage == 0) {
                if (mCourseInfoList.size() < 4) {
                    for (int i = 0; i < mCourseInfoList.size(); i++) {
                        mArrayObjectAdapter.add(mCourseInfoList.get(i));
                    }
                } else {
                    for (int i = 0; i < 4; i++) {
                        mArrayObjectAdapter.add(mCourseInfoList.get(i));
                    }
                }

            } else if (mShowPage == 1) {
                if (mCourseInfoList.size() < 9) {
                    for (int i = 0; i < mCourseInfoList.size(); i++) {
                        mArrayObjectAdapter.add(mCourseInfoList.get(i));
                    }
                } else {
                    for (int i = 0; i < 9; i++) {
                        mArrayObjectAdapter.add(mCourseInfoList.get(i));
                    }
                }
            } else if (mShowPage == 2) {
                if (mCourseInfoList.size() < 12) {
                    for (int i = 0; i < mCourseInfoList.size(); i++) {
                        mArrayObjectAdapter.add(mCourseInfoList.get(i));
                    }
                } else {
                    for (int i = 0; i < 12; i++) {
                        mArrayObjectAdapter.add(mCourseInfoList.get(i));
                    }
                }
            }
        }
    }

    private void showGridSelect(int position) {
        if (mItemBridgeAdapter != null) {
            mShowSelect = true;
            mArrayObjectAdapter.clear();
            mArrayObjectAdapter.add(0, mCourseInfoList.get(position));
            mItemBridgeAdapter.notifyDataSetChanged();
        }
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
           /* if (mBinding.customInputView.hasFocus()) {
                String text = mBinding.customInputView.getSearchText();
                if (!TextUtils.isEmpty(text)) {
                    mBinding.customInputView.deleteSearchText();
                    return true;
                }
            }*/
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
            if ((mShowPage == 0) && mIsWillSecondPage) {
                if (mBinding.includeSearchFailed.getVisibility() == View.GONE) {
                    //常规情况
                    rightToSecondPage();
                } else {
                    //网络异常
                    mShowPage = 1;
                    mRefreshBtn.requestFocus();
                }
                return true;
            } else if (mShowPage == 1) {
                rightToThirdPage();
                return true;
            }

        } else if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
            if ((mShowPage == 1)) {
                if (mBinding.kbSearchKeyboard.getVisibility() == View.GONE) {
                    leftToFirstPage();
                } else if (mBinding.includeSearchFailed.getVisibility() == View.VISIBLE) {
                    mShowPage = 0;
                    dealKeyBoardFocus();
                }
                return true;
            } else if (mShowPage == 2) {
                //  lastIndexCourse = mCurrentIndexCourse;
                if ((mCurrentIndexCourse % 4) == 0) {
                    leftToSecondPage();
                    return true;
                }
            }
        }else if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {
            if (mShowPage==0){
                if (mCurrentFocus.equals("A")||mCurrentFocus.equals("B")||mCurrentFocus.equals("C")
                        ||mCurrentFocus.equals("D")||mCurrentFocus.equals("E")||mCurrentFocus.equals("F")){
                    return  true;
                }
            }else if (mShowPage==1){
                if (mBinding.includeSearchFailed.getVisibility()==View.VISIBLE){
                    return  true;
                }
            }

        }else if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {
            if ((mShowPage==0 )){
                if (mCurrentFocus.equals("删除")||mCurrentFocus.equals("清空全部")){
                    return  true;
                }
            }else if (mShowPage==1){
                if (mBinding.includeSearchFailed.getVisibility()==View.VISIBLE){
                    return  true;
                }
            }

        }
        return super.onKeyDown(keyCode, event);
    }
    
    private void leftToSecondPage() {
        mHandler.postDelayed(() -> {
            //滑动到尽头了
            mShowPage = 1;
            mIsSecondPage = true;
            setLimitNum();
            mBinding.kbSearchKeyboard.setVisibility(View.GONE);
//            mBinding.layoutSearch.setVisibility(View.VISIBLE);
            mBinding.layoutResult.setPadding(60, 0, 0, 0);
            mBinding.layoutRoot.setPadding(110, 77, 0, 0);
//            if (mCurrentSelectType == 0) {
//                if ((mHistorySearchAdapter != null) && (mBinding.rvHistory.getChildCount() > 0) && (mBinding.layoutHistory.getVisibility() == View.VISIBLE)) {
//                    if (mCurrentHistoryIndex != -1) {
//                        mBinding.rvHistory.getChildAt(mCurrentHistoryIndex).requestFocus();
//                    } else {
//                        mBinding.layoutDelete.requestFocus();
//                    }
//                }
//            } else if (mCurrentSelectType == 1) {
//                if ((mGuideSearchAdapter != null) && (mBinding.layoutSearch.getVisibility() == View.VISIBLE)) {
//                    if (mCurrentGuideIndex == -1) {
//                        mBinding.tvResult.requestFocus();
//                    } else if (mBinding.rvGuide.getChildCount() > 0) {
//                        mBinding.rvGuide.getChildAt(mCurrentGuideIndex).requestFocus();
//                    }
//                }
//            }

            //设置3列gridview数据
            if (mItemBridgeAdapter != null) {
                mBinding.vgvSearchResult.setNumColumns(3);
                mItemBridgeAdapter.notifyDataSetChanged();
                mIsSecondPage = false;
            }
        }, 100);
    }

    private void leftToFirstPage() {
        mHandler.postDelayed(() -> {
            mShowPage = 0;
            setLimitNum();
            mBinding.kbSearchKeyboard.setVisibility(View.VISIBLE);
//            mBinding.layoutHistory.setPadding(97, 0, 0, 0);
//            mBinding.layoutGuide.setPadding(97, 0, 0, 0);
            mBinding.tvCourseTitle.setPadding(0, 0, 0, 0);
            dealKeyBoardFocus();

            //设置2列gridview数据
            if (mItemBridgeAdapter != null) {
                mBinding.vgvSearchResult.setNumColumns(2);
                mItemBridgeAdapter.notifyDataSetChanged();
            }
        }, 10);
    }

    private void dealKeyBoardFocus() {
        if ((!TextUtils.isEmpty(mCurrentFocus))) {
            if (mCurrentFocus.equals("删除")) {
//                mBinding.customInputView.getTvDeleteOne().requestFocus();
            } else {
                RecyclerView rvKeyList = mBinding.kbSearchKeyboard.getRvKeyList();
                String[] inputList = mBinding.kbSearchKeyboard.getInputList();
                for (int i = 0; i < inputList.length; i++) {
                    String keyBoard = inputList[i];
                    if (keyBoard.equals(mCurrentFocus)) {
                        rvKeyList.getChildAt(i).requestFocus();
                    }
                }
            }
        }
    }

    private void rightToThirdPage() {
        mHandler.postDelayed(() -> {
            if ((mBinding.includeSearchFailed.getVisibility() == View.VISIBLE)
                    || (mBinding.includeSearchEmpty.getVisibility() == View.VISIBLE)) {
                return;
            }
            mShowPage = 2;
            if (!mShowSelect) {
                setLimitNum();
            } else {
                mShowSelect = false;
            }
            mBinding.kbSearchKeyboard.setVisibility(View.GONE);
//            mBinding.layoutSearch.setVisibility(View.GONE);
            mBinding.layoutResult.setPadding(0, 0, 0, 0);
            mBinding.layoutRoot.setPadding(40, 77, 0, 0);
            //设置4列gridview数据
            if (mItemBridgeAdapter != null) {
                mBinding.vgvSearchResult.setNumColumns(4);
                mItemBridgeAdapter.notifyDataSetChanged();
            }

        }, 10);
    }

    private void rightToSecondPage() {
        mHandler.postDelayed(() -> {
            mShowPage = 1;
            mIsSecondPage = true;
            if (!mShowSelect) {
                setLimitNum();
            } else {
                mShowSelect = false;
            }
            mBinding.kbSearchKeyboard.setVisibility(View.GONE);
//            mBinding.layoutHistory.setPadding(0, 0, 0, 0);
//            mBinding.layoutGuide.setPadding(0, 0, 0, 0);
//            mBinding.tvCourseTitle.setPadding(30, 0, 0, 0);
//            if (mCurrentSelectType == 0) {
//                if ((mHistorySearchAdapter != null) && (mBinding.rvHistory.getChildCount() > 0) && (mBinding.layoutHistory.getVisibility() == View.VISIBLE)) {
//                    if (mCurrentHistoryIndex != -1) {
//                        mBinding.rvHistory.getChildAt(mCurrentHistoryIndex).requestFocus();
//                    } else {
//                        mBinding.layoutDelete.requestFocus();
//                    }
//                }
//            } else if (mCurrentSelectType == 1) {
//                if ((mGuideSearchAdapter != null) && (mBinding.rvGuide.getChildCount() > 0) && (mBinding.layoutSearch.getVisibility() == View.VISIBLE)) {
//                    if ((mCurrentGuideIndex != -1)) {
//                        mBinding.rvGuide.getChildAt(mCurrentGuideIndex).requestFocus();
//                    } else {
//                        mBinding.tvResult.requestFocus();
//                    }
//                }
//            }

            //设置3列gridview数据
            if (mItemBridgeAdapter != null) {
                mBinding.vgvSearchResult.setNumColumns(3);
                mItemBridgeAdapter.notifyDataSetChanged();
                mIsSecondPage = false;
            }
        }, 10);
    }

    private void setLimitNum() {
        if (mShowPage == 0) {
            if (mArrayObjectAdapter.size() > 4) {
                addGridData();
                mItemBridgeAdapter.notifyDataSetChanged();
            }
        } else if (mShowPage == 1) {
            if (mArrayObjectAdapter.size() == 4) {
                addGridData();
                mItemBridgeAdapter.notifyDataSetChanged();
            }
        } else if (mShowPage == 2) {
            if (mArrayObjectAdapter.size() == 9) {
                addGridData();
                mItemBridgeAdapter.notifyDataSetChanged();
            }
        }
    }

    @Override
    public void onTextChanged(String text) {
        mCurrentStr = text;
        dealSearch(mCurrentStr);
    }

    private void dealSearch(String text) {
        if ((TextUtils.isEmpty(text))) {
            if (NetworkUtil.isNetworkAvailable(this)) {
                mBinding.includeSearchFailed.setVisibility(View.GONE);
//                mBinding.tvResult.setVisibility(View.GONE);
//                mBinding.tvCourseTitle.setText("大家都在玩");
//                mBinding.tvTitle.setText("热门搜索");
                showCacheUi();
            } else {
                mBinding.includeSearchFailed.setVisibility(View.VISIBLE);
                mRefreshBtn.requestFocus();
                if (!mIsWillSecondPage) {
                    mCurrentFocus="0";
                }
                mShowPage=1;
            }
        } else {
            //重置
            mCurrentHistoryIndex = 0;
            mCurrentGuideIndex = -1;
//            mBinding.tvResult.setVisibility(View.VISIBLE);
//            mBinding.layoutHistory.setVisibility(View.GONE);
//            mBinding.tvResult.setText("“" + text + "”" + "的全部结果");
//            mBinding.tvCourseTitle.setText("“" + text + "”" + "的全部结果");
//            mBinding.tvTitle.setText("猜你想搜");
            mTextResult = text;
            mViewModel.getSearchInfo(new SearchReq("", text, 1, 10));
        }
    }

    @Override
    public void onFocusChanged(String text) {
        mCurrentFocus = text;
        mIsWillSecondPage = mCurrentFocus.equals("F") || mCurrentFocus.equals("L") || mCurrentFocus.equals("R")
                || mCurrentFocus.equals("X") || mCurrentFocus.equals("4") || mCurrentFocus.equals("0")
                || mCurrentFocus.equals("删除");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (mHandler != null) {
            mHandler.removeCallbacksAndMessages(null);
        }
        if (mCustomNormalDialog != null) {
            if (mCustomNormalDialog.isShowing()) {
                mCustomNormalDialog.cancel();
            }
            mCustomNormalDialog = null;
        }
    }

    private void saveHistory(int position) {
        String history = SPUtils.getInstance().getString(SharePrefer.historyInfo);
        if (TextUtils.isEmpty(history)) {
            List<CourseInfo> courseInfoList = new ArrayList<>();
            courseInfoList.add(mCourseInfoList.get(position));
            RecommendInfo recommendInfo = new RecommendInfo();
            recommendInfo.setCourseInfoList(courseInfoList);
            SPUtils.getInstance().put(SharePrefer.historyInfo, ZeeWainGson.getInstance().toJson(recommendInfo));
        } else {
            RecommendInfo recommendInfo2 = ZeeWainGson.getInstance().fromJson(history, RecommendInfo.class);
            List<CourseInfo> courseInfoList2 = recommendInfo2.getCourseInfoList();
            CourseInfo courseInfo2 = mCourseInfoList.get(position);
            boolean isContains = false;
            for (int i = 0; i < courseInfoList2.size(); i++) {
                CourseInfo courseInfo = courseInfoList2.get(i);
                if (courseInfo.getSkuID().equals(courseInfo2.getSkuID())) {
                    isContains = true;
                    courseInfoList2.remove(i);
                }
            }
            if (!isContains) {
                if (courseInfoList2.size() >= 5) {
                    courseInfoList2.remove(4);
                }
            }

            courseInfoList2.add(0,mCourseInfoList.get(position));
            recommendInfo2.setCourseInfoList(courseInfoList2);
            SPUtils.getInstance().put(SharePrefer.historyInfo, ZeeWainGson.getInstance().toJson(recommendInfo2));
        }
    }

    private void saveToCache(ProductListMo productModuleListMo) {
        List<ProductListMo.Record> records = productModuleListMo.getRecords();
        List<CourseInfo> courseInfoList = new ArrayList<>();
        for (int i = 0; i < records.size(); i++) {
            ProductListMo.Record record = records.get(i);
            String skuId = record.getSkuId();
            String productTitle = record.getProductTitle();
            String productImg = record.getProductImg();
            CourseInfo courseInfo = new CourseInfo();
            courseInfo.setSkuID(skuId);
            courseInfo.setName(productTitle);
            courseInfo.setImageUrl(productImg);
            courseInfoList.add(courseInfo);
        }
        RecommendInfo recommendInfo = new RecommendInfo();
        recommendInfo.setCourseInfoList(courseInfoList);
        SPUtils.getInstance().put(SharePrefer.recommendInfo, ZeeWainGson.getInstance().toJson(recommendInfo));
        showCacheUi();
    }
}